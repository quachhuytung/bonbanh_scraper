import pathlib
import json
import psycopg2
import os
import json
from dotenv import load_dotenv
from scrapy.loader.processors import MapCompose
from scrapy.exporters import JsonLinesItemExporter

load_dotenv()

class DeleteImageUrlsPipeline:
    def process_item(self, item, spider):
        if "image_urls" in item.keys():
            del item["image_urls"]
        return item


class FilterImageAttribs(object):
    def process_item(self, item, spider):
        if "images" in item.keys():
            if len(item.get("images")) == 0:
                del(item["images"])
            else:
                proc = MapCompose(lambda v: v.get("path"))
                item["images"] = proc(item.get("images"))
        return item

class JsonLineWriterPipeline(object):
    base_data_path = "./data/"
    def open_spider(self, spider):
        pathlib.Path("./data/").mkdir(parents=True, exist_ok=True)
        self.item_file = open(self.base_data_path + "items.jl", "wb")
        self.item_exporter = JsonLinesItemExporter(self.item_file, encoding="utf-8", ensure_ascii=False)
        self.item_exporter.start_exporting()

    def close_spider(self, spider):
        self.item_exporter.finish_exporting()
        self.item_file.close()

    def process_item(self, item, spider):
        self.item_exporter.export_item(item)

class ImportData:
    create_db = """
    create table if not exists bonbanh ( id int generated by default as identity primary key,
    date timestamp, brand varchar(50), serie varchar(50),model_year varchar(10),
    info json, price_vnd int, price_dol varchar(30), images json, description text); 
    """

    insert_data = """
    insert into bonbanh (date, brand, serie, model_year, info, price_vnd, price_dol, images, description)
    values (%s, %s, %s, %s, %s, %s, %s, %s, %s);
    """
    def open_spider(self, spider):
        user = os.environ.get("database_username")
        password = os.environ.get("database_password")
        host = os.environ.get("database_host")
        database = os.environ.get("database")
        port = os.environ.get("port")
        self.connection = psycopg2.connect(
                database=database,
                user=user,
                password=password,
                host=host,
                port=port
        )
        self.cursor = self.connection.cursor()
        self.cursor.execute(self.create_db)
        self.connection.commit()

    def process_item(self, item, spider):
        data = (
            item.get("date"),
            item.get("brand"),
            item.get("serie"), 
            item.get("model_year"),
            json.dumps(item.get("info"), ensure_ascii=False),
            item.get("price_vnd"),
            item.get("price_dol"),
            json.dumps(item.get("images"), ensure_ascii=False),
            item.get("description")
        )
        self.cursor.execute(self.insert_data, data)
        self.connection.commit()
        return item

    def close_spider(self, spider):
        self.cursor.close()
        self.connection.close()
